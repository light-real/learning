#include<iostream>
using namespace std;
#include<vector>
#include<stack>
#include<string>

class Base{
public:
	Base(){
		for(int i = 0;i<5;i++){
			sta.push(i+1);
			vec.push_back(i+2);
		}
	}	 
	
	void func(){
		cout<<"Base func 调用"<<endl;
	} 
	vector<int> vec;
	stack<int> sta;
	
	static int age; //类内声明，类外初始化 
}; 
int Base::age  = 21; 
class Son : public Base{
public:
	vector<int> vec;
	Son(){
		for(int i = 0;i<5;i++){
			vec.push_back(i-5);
		}
	}	
	
	void func(){
		cout<<"son func 调用"<<endl;
	}
	
	static void func_1(){ //静态成员函数，只能访问静态成员变量 
		cout<<"Son-static func_1 is visiting age,and age is "<< age <<endl; 
//		cout<<name<<endl;  //不可访问 
	}
//private:
	static int age;  //静态成员变量的处理方式：类内声明，类外初始化	
	int name;
};

int Son::age  = 22; 

ostream& operator<<(ostream &cout,Son &s){   // <<运算符只能在类外实现 
//	while(!b.sta.empty()){
//		cout<<"b.sta's content is "<<b.sta.top()<<endl;
//		b.sta.pop();	
//	}
	
	cout<<"------------------"<<endl;
	
	vector<int>::iterator i;  
	for(i = s.Base::vec.begin();i!=s.Base::vec.end();i++){
		cout<<"s's father's vec content is "<<*i<<endl;
	}
	
	cout<<"------------------"<<endl;
	
	vector<int>::iterator j;
	for(j = s.Son::vec.begin();j!=s.Son::vec.end();j++){  //访问自己的属性时，作用域可加可不加 
		cout<<"s's himself content is"<<*j<<endl; 
	}
	return cout;
}

void test01(){
	Base b;
	Son s;
	cout << s<<endl;
	cout<<"------------------"<<endl;
	s.func();
	cout<<"------------------"<<endl;
	s.Base::func();
	cout<<"------------------"<<endl;
	cout<<s.age<<endl;	
	cout<<"------------------"<<endl;
	s.func_1();
} 

int main(){
	test01();
	return 0;
}
