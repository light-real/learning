#include<iostream>
using namespace std;
class Animal{
public:
	virtual void speak(){
		cout<<"动物在说话"<<endl;
	}
};

class Cat:public Animal{
public:
	void speak(){
		cout<<"猫在说话"<<endl;
	}
};

class Dog:public Animal{
public:
	void speak(){
		cout<<"狗在说话"<<endl;
	}
};

//地址早绑定  在编译阶段确定函数地址
//地址晚绑定  在运行阶段确定函数地址 


// 动态多态满足条件：
//  1、有继承关系
//  2、子类重写父类中的虚函数    
//  	函数重载和函数重写的区别：
//          函数重写：   函数返回值类型  函数名  形参列表完全相同	
//          函数重载     函数返回值类型  函数名相同   函数的形参列表不同（可以表现为参数的个数、顺序、类型不同）

//动态多态的使用
//  父类的引用或者指针指向 子类对象 
 
void speak(Animal &animal){
	animal.speak();
}

void test01(){
	Cat cat;
	speak(cat);
	
	Dog dog;
	speak(dog);
}

int main(){
	test01();
	return 0;
}
