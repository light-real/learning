#include<iostream>
#include<string>
#include<fstream>
using namespace std;
#define FILENAME "empFile.txt"

//创建职工抽象类：
//职工的分类：普通员工、经理、老板
//将三种职工抽象到一个类(Worker)中，利用多态管理不同职工种类
//职工的属性为：职工编号、职工姓名、职工所在部门编号
//职工的行为：岗位职责信息描述、获取岗位名称
 
//职工抽象类 
class Worker{
	public:
//		显示个人信息
		virtual void showInfo() = 0;  //纯虚函数
		
//		获取岗位名称
		virtual string getDepName() = 0; 
		
		int m_Id;  // 职工编号
		string m_name; //职工姓名
		int m_depId; //职工部门编号 
};

//员工类
class employee:public Worker{
public:
	employee(int id,string name,int did); //构造函数 
	virtual void showInfo();//显示个人信息 
	
	virtual string getDepName(); //获取岗位名称 
};

employee::employee(int id,string name,int did){  //构造函数实现 
	this->m_Id = id;
	this->m_name = name;
	this->m_depId = did;
}

void employee::showInfo(){
	cout<<"职工编号："<<this->m_Id
		<<"\t职工姓名："<<this->m_name
		<<"\t岗位："<<this->getDepName()
		<<"\t岗位职责：完成经理交代的任务"<<endl; 
}

string employee::getDepName(){
	return string("员工");
} 

//经理类
class Manager:public Worker{
public:
	Manager(int id,string name,int did); //构造函数 
	virtual void showInfo();//显示个人信息 
	
	virtual string getDepName(); //获取岗位名称 
};

Manager::Manager(int id,string name,int did){  //构造函数实现 
	this->m_Id = id;
	this->m_name = name;
	this->m_depId = did;
}

void Manager::showInfo(){
	cout<<"职工编号："<<this->m_Id
		<<"\t职工姓名："<<this->m_name
		<<"\t岗位："<<this->getDepName()
		<<"\t岗位职责：完成老板交代的任务，传递给员工"<<endl; 
}

string Manager::getDepName(){
	return string("经理");
}

//老板类
class Boss:public Worker{
public:
	Boss(int id,string name,int did); //构造函数 
	virtual void showInfo();//显示个人信息 
	
	virtual string getDepName(); //获取岗位名称 
};

Boss::Boss(int id,string name,int did){  //构造函数实现 
	this->m_Id = id;
	this->m_name = name;
	this->m_depId = did;
}

void Boss::showInfo(){
	cout<<"职工编号："<<this->m_Id
		<<"\t职工姓名："<<this->m_name
		<<"\t岗位："<<this->getDepName()
		<<"\t岗位职责：管理公司所有的事务"<<endl; 
}

string Boss::getDepName(){
	return string("老板");
}
 

class WorkerManager{

	public:
		WorkerManager();
		
		void ShowMenu();  //显示菜单 
		
		void exitSystem(); //退出程序
		
		void AddWorker(); //添加职工信息 
		
		int m_Empnum;  //记录职工人数
		
		Worker ** m_EmpArray; //用于记录Work*的指针 

        void save();  //用于保存文件

        bool m_FileIsEmpty;  // 判断文件是否为空
		
		void addEmp(); //用于添加职工 
        
        int get_Empnum(); //统计文件中的人数

        void init_emp(); //用于初始化员工

        void show_emp(); //用于显示职工 

        
		 
		~WorkerManager(); 
		
		
	protected:
};


WorkerManager::WorkerManager(){
    //文件不存在的情况
    ifstream ifs;
    ifs.open(FILENAME,ios::in);  //读文件
    if(!ifs.is_open()){
        cout<<"文件不存在!"<<endl;
        this->m_Empnum = 0;  //初始化人数为0
        this->m_EmpArray = NULL;  //初始化数组指针
        this->m_FileIsEmpty = true;  //文件为空设置为true
        ifs.close();
        return;
    }


    //文件存在，数据为空 
    char ch;
    ifs >> ch;  //将文件尾读走
    if(ifs.eof()){ //判断文件是否为空，文件尾已经被读走   eof:empty of file
        // 文件为空
        cout<<"文件为空!"<<endl;
        this->m_Empnum = 0;  //初始化人数为0
        this->m_EmpArray = NULL;  //初始化数组指针
        this->m_FileIsEmpty = true;  //文件为空设置为true
        ifs.close();
        return;
    }

    //当文件存在，并且记录数据
    int num = this->get_Empnum();
    cout<<"职工人数为："<<num<<endl;
    this->m_Empnum = num;

	this->m_EmpArray = new Worker*[this->m_Empnum]; // 开辟空间
    this->init_emp(); //将文件中的数据，存在数组中
    // for(int i = 0;i<this->m_Empnum;i++){
    //     cout<<"第"<<i<<"个员工的员工编号："<<this->m_EmpArray[i]->m_Id<<" "
    //         <<"姓名："<<this->m_EmpArray[i]->m_name<<" "
    //         <<"部门编号："<<this->m_EmpArray[i]->m_depId<<endl;
    // }
} 


void WorkerManager::ShowMenu(){
	cout<<"-----------------------------------\n";
	cout<<"-------欢迎使用职工管理系统--------\n";
	cout<<"-------   0.退出管理程序   --------\n";
	cout<<"-------   1.增加职工信息   --------\n"; 
	cout<<"-------   2.显示职工信息   --------\n";
	cout<<"-------   3.删除离职员工   --------\n";
	cout<<"-------   4.修改职工信息   --------\n";
	cout<<"-------   5.查找职工信息   --------\n";
	cout<<"-------   6.按照编号排序   --------\n";
	cout<<"-------   7.清空所有文档   --------\n";
	cout<<"-----------------------------------\n";
	cout<<endl;
}

void WorkerManager::addEmp(){    //添加职工
	cout<<"请输入添加职工的数量"<<endl;
	int addNum;  //保存用户输入的职工数量
	cin>>addNum;
	if(addNum >0 ){
		//添加 
		//计算添加新的空间大小
		int newSize = this->m_Empnum + addNum;   //数组空间大小 + 添加人的数量  = 新空间的大小
		
//		开辟新空间
		Worker **newSpace = new Worker *[newSize]; 
		//将原来的数据，放到新开辟的空间
		if(this->m_EmpArray != NULL){
			for(int i = 0;i<this->m_Empnum;i++){
				newSpace[i] = this->m_EmpArray[i];  //将原来的数据拷贝到新空间 
			}
		} 
		
		//添加新数据
		for(int i = 0;i<addNum;i++){
			int id; // 职工编号
			string name;  //职工姓名
			int did; //部分编号
			
			cout<<"请输入第"<<i+1<<"个职工的编号："<<endl;
			cin>>id;
			
			cout<<"请输入第"<<i+1<<"个职工的姓名："<<endl;
			cin>>name;
			
			cout<<"请选择该职工的岗位:\n";
			cout<<"1、普通职工\n";
			cout<<"2、经理\n";
			cout<<"3、老板\n"; 
			cin>>did;
			
			Worker *worker = NULL;
			switch(did){
				case 1:
					worker = new employee(id,name,1);
					break;
				case 2:
					worker = new Manager(id,name,2);
					break;
				case 3:
					worker = new Boss(id,name,3);
					break;
				default:
					break;
					
			}
			
//			将创建的职工指针，保存在数组当中
			newSpace[this->m_Empnum + i] = worker; 
			
		} 
		//释放原来的空间
		delete[] this->m_EmpArray;
		
		//更改新空间的指向
		this->m_EmpArray = newSpace;
		
		//更新当前的职工人数
		this->m_Empnum = newSize;

        this->m_FileIsEmpty = false;  //更新文件是否为空

        this->save();  //保存数据到文件中
		
		cout<<"成功添加" <<addNum<<"名员工"<<endl; 
	} 
	else{
		cout<<"输入有误"<<endl; 
	}
	
	//按任意键后清屏返回上级
	system("pause");
	system("cls"); 
}

void WorkerManager::save(){  //写文件实现
    ofstream ofs;
    ofs.open(FILENAME,ios::out);  //用输出的方式打开文件 ---- 写文件
    
    for(int i = 0;i<this->m_Empnum;i++){
        ofs<<this->m_EmpArray[i]->m_Id<<" "
           <<this->m_EmpArray[i]->m_name<<" "
           <<this->m_EmpArray[i]->m_depId<<endl;
    }

    ofs.close(); //关闭文件  
}

int WorkerManager::get_Empnum(){ //统计文件中的人数实现
    ifstream ifs;
    ifs.open(FILENAME,ios::in);
    
    int id;
    string name;
    int did;

    int num = 0; // 用于统计人数
    while(ifs>>id && ifs>>name && ifs>>did){
        num++;
    }
    
    return num;
}

void WorkerManager::init_emp(){  //初始化员工
    ifstream ifs;
    ifs.open(FILENAME,ios::in);  //读文件
    if(!ifs.is_open()){
        cout<<"文件打开失败"<<endl;
    }
    int id;
    string name;
    int did;
    int index = 0;
    while(ifs >> id && ifs >> name && ifs >> did){
        Worker *worker = NULL; //创建一个父类指针 用于创建从文件中读到的员工
        if(did == 1 ){  // 部门为 普通员工 时
            worker = new employee(id,name,did);
        }
        else if(did == 2 ){  // 部门为 经理 时
            worker = new Manager(id,name,did);
        }
        else{  // 部门为 老板 时
            worker = new Boss(id,name,did);
        }
        this->m_EmpArray[index] = worker;
        index++;
    }
    ifs.close();
}

void WorkerManager::show_emp(){
    //判断文件是否为空或者不存在
    if(this->m_FileIsEmpty){
        cout<<"文件不存在或者记录为空"<<endl;
    }
    else{
        for(int i = 0;i< m_Empnum;i++){
            this->m_EmpArray[i]->showInfo(); //利用多态调用程序接口
        }
    }
    system("pause");
    system("cls");
}

void WorkerManager::exitSystem(){
	cout<<"欢迎下次使用"<<endl;
	system("pause");
	exit(0);
}

WorkerManager::~WorkerManager(){
	if(this->m_EmpArray != NULL){
        delete[] this->m_EmpArray;
        this->m_EmpArray = NULL;
    }
} 




int main(){
	WorkerManager wm;
	int choice  = 0;
	while(true){
		wm.ShowMenu(); //显示菜单
		cout<<"请输入你的选择"<<endl; 
		cin>>choice;
		switch(choice){
			case 0: //退出系统 
				wm.exitSystem();
				break;
			case 1: //增加职工信息
				wm.addEmp();
				break; 
			case 2: //显示职工信息
                wm.show_emp();
				break;
			case 3: //删除职工信息
				break;
			case 4: //修改职工信息
				break;
			case 5: //查找职工信息
				break;
			case 6: //排序职工信息
				break;
			case 7: //清空职工信息
				break;	
			default:
				system("cls");
				break;								
		}
	}
	
	system("pause");	
	return 0;
} 
