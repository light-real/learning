#include<iostream>
using namespace std;
#include<string>

//虚析构和纯虚析构
//多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用子类的析构代码
//解决方式：将父类中的析构函数改为虚析构或者纯虚析构


//虚析构和纯虚析构共性：
//   1、可以解决父类指针释放子类对象
//   2、都需要具体的函数实现

//虚析构和纯虚析构的区别
//	如果是纯虚析构，该类属于抽象类，无法实例化对象

class Animal{
public:
	Animal(){
		cout<<"Animal的构造函数"<<endl;
	}
	//单纯的析构函数，父类创造的子类对象是不会调用子类的析构代码的
	//	如果在堆区创建了数据，会造成内存泄露 
	//	要解决内存泄露问题，需要将父类的析构函数改为虚析构，这样就会调用子类的析构函数 
//	~Animal(){    
//		cout<<"Animal的析构函数"<<endl;
//	}
	
//	虚析构 
//	virtual ~Animal(){    
//			cout<<"Animal的析构函数"<<endl;
//		}
	
//	纯虚析构	
	virtual ~Animal() = 0;


	virtual void speak() = 0; //纯虚函数    纯虚函数必须要重写，否则子类也属性抽象类 
//	virtual void speak(){ //虚函数 
//		
//	} 
}; 

Animal::~Animal(){
	cout<<"Animal的纯虚析构"<<endl;
}

class Cat:public Animal{
public:
	Cat(string name){
		cout<<"Cat的构造函数"<<endl; 
		this->name = new string(name);
	}
	~Cat(){
		cout<<"Cat的析构函数"<<endl;
	}
	virtual void speak(){
		cout<<*name<<"小猫在说话"<<endl;
	}
	string *name;
};

void test01(){
	Animal *cat = new Cat("Tom");
	cat->speak();
	delete cat;
}
int main(){
	test01();
	return 0;
}
