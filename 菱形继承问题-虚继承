#include<iostream>
using namespace std;
// 菱形继承
// 两个派生类继承同一个基类
// 再有一个派生类3同时继承上面的两个派生类
// 对于派生类3来说，对于基类的数据，只要保留一份就可以	 

//动物类 
class Animal{
public:
	int age;
};

//利用虚继承，解决菱形继承的问题
//继承之前，加上关键字virtual 变为虚继承
//Animal类成为虚基类 


//虚继承的底层实现：虚继承对于继承的类，维护一个指针，vbptr，通过偏移量，指向同一块父类的变量的内存空间 

//羊类 
class Sheep: virtual public Animal{
	
};

//驼类 
class Tuo: virtual public Animal{
	
}; 

//草泥马类 
class SheepTuo:public Sheep,public Tuo{

};

ostream &operator<<(ostream &cout,SheepTuo &st){
	cout<<"st.Sheep::age = "<<st.Sheep::age<<endl
		<<"st.Tuo::age = "<<st.Tuo::age<<endl;
	return cout;
}

void test01(){
	SheepTuo st;  
	// 数据只要有一份就可以了，菱形继承导致有两份，资源浪费 
	st.Sheep::age = 18; 
	st.Tuo::age = 28;
	cout<<st<<endl;
}

int main(){
	test01();
	system("pause");
	return 0;
}
